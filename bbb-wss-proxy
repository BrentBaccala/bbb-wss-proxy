#!/usr/bin/python3

# A customized version of websockify that uses the websockify library,
# but replaces one method call to allow VNC Websocket connections
# to be authenticated with a JSON Web Token from Big Blue Button
# and then relayed to a destination specified in the query string.
#
# This means that only Big Blue Button users can use the proxy.
#
# The URL must be in the form:
#
#      wss://BBB_SERVER/proxy/{jwt}
#  or  wss://BBB_SERVER/proxy/{jwt}&target=HOST:PORT
#
# where {jwt} is a JSON Web Token auto-generated by Big Blue Button.
#
# A regular expression can be specified in the ALLOWED_TARGETS
# environment variable to allow the host and port, which must match
# the regular expression, to be specified in the URL query parameters
# as shown.  This form of the URL is only permitted if ALLOWED_TARGETS
# has been set.
#
# Websockify has plugins for token processing, but the plugin only has
# access to the token in the query string, not the entire query
# string, so we can't use that feature.

import sys
import os
import re
import urllib
import jwt

from websockify import websocketproxy
from websockify.websocketproxy import ProxyRequestHandler

# Extract the Big Blue Button API key from PROP_FILE
#
# We could use pyjavaproperties to parse the file, but this package doesn't
# currently exist in Ubuntu 18's repository as a python3 package (only as a
# Python 2 package), so I just parse the file with a regular expression.

PROP_FILE = "/usr/share/bbb-web/WEB-INF/classes/bigbluebutton.properties"

def securitySalt():
    with open(PROP_FILE) as file:
        for line in file:
            match = re.match(r'securitySalt=(.*)', line)
            if match:
                return match.group(1)
    return None

old_new_websocket_client = ProxyRequestHandler.new_websocket_client

allowed_targets = None

def new_websocket_client(self):

    url = urllib.parse.urlparse(self.path)
    querydict = urllib.parse.parse_qs(url.query)

    # Use the defaults specified on the command line unless overridden by URL.

    if 'target' in querydict:
        target = querydict['target'][0]
        if allowed_targets and re.match(allowed_targets, target):
            (host, port) = target.split(':')
            self.server.target_host = host
            self.server.target_port = int(port)
        else:
            self.log_message('Requested target does not match ALLOWED_TARGETS')
            self.send_response(401, 'Unauthorized')
            self.end_headers()
            return

    # Pass through to the "parent" class's version of this method.
    old_new_websocket_client(self)

ProxyRequestHandler.new_websocket_client = new_websocket_client

if __name__ == '__main__':

    if 'SOURCE' in os.environ:
        sys.argv.append(os.environ['SOURCE'])

    if 'DEFAULT_TARGET' in os.environ:
        sys.argv.append(os.environ['DEFAULT_TARGET'])

    if 'ALLOWED_TARGETS' in os.environ:
        allowed_targets = os.environ['ALLOWED_TARGETS']

    # This will call WebSocketProxy; its default RequestHandlerClass
    # is ProxyRequestHandler, but we can't override
    # RequestHandlerClass at this point, so we settle for changing the
    # method inside ProxyRequestHandler.

    websocketproxy.websockify_init()
