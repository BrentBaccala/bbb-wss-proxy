#!/usr/bin/python3

# A customized version of websockify that uses the websockify library,
# but replaces one method call to allow VNC Websocket connections
# to be authenticated with a JSON Web Token from Big Blue Button
# and then relayed to a destination specified in the query string.
#
# This means that only Big Blue Button users can use the proxy.
#
# The URL must be in the form:
#
#      wss://...?token={jwt}
#  or  wss://...?token={jwt}&host=HOST&port=PORT
#
# where {jwt} is a JSON Web Token auto-generated by Big Blue Button.
#
# If the --allow-override switch is specified, then the host and
# port can be specified in the URL query parameters as shown.
#
# Websockify has plugins for token processing, but the plugin only has
# access to the token in the query string, not the entire query
# string.

import sys
import os
import re
import urllib
import jwt

from websockify import websocketproxy
from websockify.websocketproxy import ProxyRequestHandler

# Extract the Big Blue Button API key from PROP_FILE
#
# We could use pyjavaproperties to parse the file, but this package doesn't
# currently exist in Ubuntu 18's repository as a python3 package (only as a
# Python 2 package), so I just parse the file with a regular expression.

PROP_FILE = "/usr/share/bbb-web/WEB-INF/classes/bigbluebutton.properties"

def securitySalt():
    with open(PROP_FILE) as file:
        for line in file:
            match = re.match(r'securitySalt=(.*)', line)
            if match:
                return match.group(1)
    return None

old_new_websocket_client = ProxyRequestHandler.new_websocket_client

allow_override = False

def new_websocket_client(self):

    try:
        url = urllib.parse.urlparse(self.path)
        querydict = urllib.parse.parse_qs(url.query)
        jwt.decode(''.join(querydict['token']), securitySalt())
    except (jwt.PyJWTError, KeyError, IndexError) as ex:
        self.log_message(repr(ex))
        self.send_response(401, 'Unauthorized')
        self.end_headers()
        return

    # Use the defaults specified on the command line unless overridden by URL.

    if allow_override:
        if 'host' in querydict:
            self.server.target_host = querydict['host'][0]
        if 'port' in querydict:
            self.server.target_port = int(querydict['port'][0])

    # Pass through to the "parent" class's version of this method.
    old_new_websocket_client(self)

ProxyRequestHandler.new_websocket_client = new_websocket_client

if __name__ == '__main__':

    if 'SOURCE' in os.environ:
        sys.argv.append(os.environ['SOURCE'])

    if 'TARGET' in os.environ:
        sys.argv.append(os.environ['TARGET'])

    if 'ALLOW_OVERRIDE' in os.environ:
        allow_override = True

    if '--allow-override' in sys.argv:
        allow_override = True
        sys.argv.remove('--allow-override')

    # This will call WebSocketProxy; its default RequestHandlerClass
    # is ProxyRequestHandler, but we can't override
    # RequestHandlerClass at this point, so we settle for changing the
    # method inside ProxyRequestHandler.

    websocketproxy.websockify_init()
